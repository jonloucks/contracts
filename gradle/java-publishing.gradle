String getConfig(String name) {
    final Provider<String> variable = providers.environmentVariable(name);
    if (variable.isPresent()) {
        return variable.get();
    }
    return project.findProperty(name) as String
}

String getPublishUsername() {
    getConfig("OSSRH_USERNAME")
}

String getPublishPassword() {
    getConfig("OSSRH_PASSWORD")
}

String getGpgSecretKey() {
    String value = getConfig("OSSRH_GPG_SECRET_KEY")
    if (null == value) {
        null
    } else {
        if (value.startsWith("-")) {
            return value;
        }
        return new String(Base64.decoder.decode(value), "UTF-8")
    }
}

String getGpgSecretKeyPassword() {
    getConfig("OSSRH_GPG_SECRET_KEY_PASSWORD")
}

boolean hasReleaseCredentials() {
    getGpgSecretKey() != null && getGpgSecretKeyPassword() != null
}

boolean hasPublishCredentials() {
    getPublishUsername() != null && getPublishPassword() != null
}

String getWorkflowName() {
    getConfig("CONTRACTS_WORKFLOW") ?: "developer-release"
}

boolean doingDeveloperRelease() {
    "developer-release" == getWorkflowName()
}

boolean doingMainRelease() {
    "main-release" == getWorkflowName() && hasReleaseCredentials()
}

boolean doingSnapshotRelease() {
    "main-release" == getWorkflowName() && hasReleaseCredentials() && !(version as String).endsWith("SNAPSHOT")
}

boolean doingRelease() {
    doingDeveloperRelease()|| doingMainRelease() || doingSnapshotRelease()
}

boolean doingSigning() {
    doingRelease()
}

println "CONTRACTS_WORKFLOW: '" + getWorkflowName() + "'"

if (hasReleaseCredentials()) {
    println "Has Release Credentials"
} else {
    println "No Release Credentials"
}

if (hasPublishCredentials()) {
    println "Has Publish Credentials"
} else {
    println "No Publish Credentials"
}

if (doingSigning()) {
    println "Doing signing"
    apply plugin: 'signing'
} else {
    println "No signing"
}

if (doingRelease()) {
    tasks.withType(Jar) { task ->
        task.doLast {
            ant.checksum algorithm: 'md5', file: it.archivePath
            ant.checksum algorithm: 'sha1', file: it.archivePath
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Contracts'
                description = 'Java Dependency Contracts for dependency inversion.'
                url = 'https://github.com/jonloucks/contracts'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/jonloucks/contracts?tab=MIT-1-ov-file#MIT-1-ov-file'
                    }
                }
                developers {
                    developer {
                        id = 'jonloucks'
                        name = 'Jon Loucks'
                        email = 'j.loucks@comcast.net'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jonloucks/contracts.git'
                    developerConnection = 'scm:git:ssh://github.com:jonloucks/contracts.git'
                    url = 'https://github.com/jonloucks/contracts'
                }
            }
        }
    }
    repositories {
        if (doingDeveloperRelease() || doingMainRelease()) {
            maven {
                name = "LocalMavenWithChecksums"
                url = uri(layout.buildDirectory.dir("staging-deploy"))
            }
        }
    }
}

if (doingSigning()) {
    signing {
        useInMemoryPgpKeys(getGpgSecretKey(), getGpgSecretKeyPassword())
        sign publishing.publications.mavenJava
    }
}