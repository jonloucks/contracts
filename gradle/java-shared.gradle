group = 'io.github.jonloucks.contracts'
version = '1.0-SNAPSHOT'

int COMPILER_VERSION = libs.versions.jdk.version.get() as int
int LANGUAGE_LEVEL = libs.versions.java.language.version.get() as int

java {
    sourceCompatibility = JavaVersion.toVersion(LANGUAGE_LEVEL)
    targetCompatibility = JavaVersion.toVersion(LANGUAGE_LEVEL)
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(COMPILER_VERSION))
    }
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

compileJava {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs += ["-Xlint:unchecked"]
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(LANGUAGE_LEVEL)
}

tasks.named('compileTestJava') {
    sourceCompatibility = JavaVersion.toVersion(LANGUAGE_LEVEL)
    targetCompatibility = JavaVersion.toVersion(LANGUAGE_LEVEL)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform {
        excludeTags 'slow', 'unstable'
        if (project.hasProperty('includeTags')) {
            Set<String> tags = (project.includeTags as String).split(',')
            excludeTags.removeAll(tags)
            includeTags.addAll(tags)
        }
        if (project.hasProperty('excludeTags')) {
            Set<String> values = (project.excludeTags as String).split(',')
            excludeTags.removeAll(values)
            excludeTags.addAll(values)
        }
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests tagged with "integration".'
    group = 'verification'

    useJUnitPlatform {
        includeTags 'integration'
    }

    testClassesDirs = testing.suites.test.sources.output.classesDirs
    classpath = testing.suites.test.sources.runtimeClasspath

    shouldRunAfter tasks.named('test')
}

tasks.named('check') {
    dependsOn tasks.named('integrationTest')
}

repositories {
    mavenCentral()
}

static def getRepositoryUserName() {
    System.getenv("OSSRH_USERNAME")
}

static def getRepositoryPassword() {
    System.getenv("OSSRH_PASSWORD")
}

static boolean hasReleaseCredentials() {
    getRepositoryUserName() != null && getRepositoryPassword() != null
}

boolean hasGithubActions() {
    providers.environmentVariable("GITHUB_ACTIONS").isPresent()
}

boolean doingOfficalRelease() {
    !(version as String).endsWith("SNAPSHOT") && ext.hasGithubActions && ext.hasReleaseCredentials
}

boolean doingSnapshotRelease() {
    !doingOfficalRelease() && hasReleaseCredentials() && (version as String).endsWith("SNAPSHOT")
}

boolean doingSigning() {
    doingOfficalRelease() || doingSnapshotRelease()
}

if (hasGithubActions()) {
    println "Has GitHub Actions";
}

if (hasReleaseCredentials()) {
    println "Has Release Credentials"
} else {
    println "No Release Credentials"
}

if (doingSigning()) {
    println "Doing signing"
} else {
    println "No signing"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Jon Loucks Contracts Library'
                description = 'Java Dependency Contracts for dependency inversion.'
                url = 'https://github.com/jonloucks/contracts'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/jonloucks/contracts?tab=MIT-1-ov-file#MIT-1-ov-file'
                    }
                }
                developers {
                    developer {
                        id = 'jonloucks'
                        name = 'Jon Loucks'
                        email = 'j.loucks@comcast.net'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jonloucks/contracts.git'
                    developerConnection = 'scm:git:ssh://github.com:jonloucks/contracts.git'
                    url = 'https://github.com/jonloucks/contracts'
                }
            }
        }
    }
}
publishing {
    repositories {
        if (doingOfficalRelease()) {
            println "publishing to sonatype staging"
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"

                credentials {
                    username = getRepositoryUserName()
                    password = getRepositoryPassword()
                }
            }
        } else if (doingSnapshotRelease()) {
            println "publishing to sonatype snapshots"
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

                credentials {
                    username = getRepositoryUserName()
                    password = getRepositoryPassword()
                }
            }
        }
    }
}

if (doingSigning()) {
signing {
    useInMemoryPgpKeys(
            project.findProperty("GPG_SIGNING_KEY") as String,
            project.findProperty("GPG_SIGNING_PASSWORD") as String
    )
    sign publishing.publications.mavenJava
}
}

